@page "/addgig"
@inject HttpClient Http
@attribute [Authorize]
@inject GigService gigService
<h3>Add Gig</h3>

<div class="row">
    <div class="col-4">

        <EditForm Model="_gig" OnValidSubmit="HandleAddGig">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="location">Location</label>
                <InputText @bind-Value="_gig.Location" id="location" class="form-control" />
                <ValidationMessage For="@(() => _gig.Location)" />
            </div>

            <div class="form-group">
                <label for="date">Date</label>
                <InputDate @bind-Value="_gig.Date" id="date" class="form-control" />
                <ValidationMessage For="@(() => _gig.Date)" />
            </div>

            <div class="form-group">
                <label for="payment">Payment</label>
                <InputNumber @bind-Value="_gig.Payment" id="payment" class="form-control" />
                <ValidationMessage For="@(() => _gig.Payment)" />
            </div>

            <div class="form-group">
                <label for="hasBeenPaid">Paid</label>
                <InputCheckbox @bind-Value="_gig.HasBeenPaid" id="hasBeenPaid" />
            </div>

            <button class="btn btn-primary" type="submit">Add Gig</button>
            <input class="btn btn-outline-primary" type="button" value="Cancel" @onclick="HandleCancel" />
        </EditForm>

    </div>
</div>
@code {
    Gig _gig = new Gig();

    public async Task HandleAddGig()
    {
        //var result = await Http.PostAsJsonAsync("", _gig);
        Console.WriteLine("Form submitted successfully!");
        gigService.Gigs.Add(_gig);
    }

    void HandleCancel()
    {
        _gig = new Gig();
    }
}
